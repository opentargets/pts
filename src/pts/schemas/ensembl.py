# ENSEMBL_1

import polars as pl

schema_113 = pl.Schema({
    'ArrayExpress': pl.List(pl.String()),
    'BioGRID': pl.List(pl.String()),
    'CCDS': pl.List(pl.String()),
    'CDD': pl.List(pl.String()),
    'ChEMBL': pl.List(pl.String()),
    'DBASS3': pl.List(pl.String()),
    'DBASS5': pl.List(pl.String()),
    'EMBL': pl.List(pl.String()),
    'ENS_LRG_gene': pl.List(pl.String()),
    'ENS_LRG_transcript': pl.List(pl.String()),
    'Ens_Hs_gene': pl.List(pl.String()),
    'Ens_Hs_transcript': pl.List(pl.String()),
    'Ens_Hs_translation': pl.List(pl.String()),
    'EntrezGene': pl.List(pl.String()),
    'EntrezGene_trans_name': pl.List(pl.String()),
    'GO': pl.List(
        pl.Struct(
            {
                'evidence': pl.List(pl.String()),
                'parents': pl.List(pl.String()),
                'term': pl.String(),
            },
        ),
    ),
    'Gene3D': pl.List(pl.String()),
    'GeneCards': pl.List(pl.String()),
    'HAMAP': pl.List(pl.String()),
    'HGNC': pl.List(pl.String()),
    'HGNC_trans_name': pl.List(pl.String()),
    'HPA': pl.List(pl.String()),
    'Interpro': pl.List(pl.String()),
    'LRG': pl.List(pl.String()),
    'MEROPS': pl.List(pl.String()),
    'MIM_GENE': pl.List(pl.String()),
    'MIM_MORBID': pl.List(pl.String()),
    'MobiDBLite': pl.List(pl.String()),
    'NCBIfam': pl.List(pl.String()),
    'PANTHER': pl.List(pl.String()),
    'PDB': pl.List(pl.String()),
    'PIRSF': pl.List(pl.String()),
    'PRINTS': pl.List(pl.String()),
    'Pfam': pl.List(pl.String()),
    'Prosite_patterns': pl.List(pl.String()),
    'Prosite_profiles': pl.List(pl.String()),
    'RFAM': pl.List(pl.String()),
    'RFAM_trans_name': pl.List(pl.String()),
    'RNAcentral': pl.List(pl.String()),
    'Reactome': pl.List(pl.String()),
    'Reactome_gene': pl.List(pl.String()),
    'Reactome_transcript': pl.List(pl.String()),
    'RefSeq_mRNA': pl.List(pl.String()),
    'RefSeq_mRNA_predicted': pl.List(pl.String()),
    'RefSeq_ncRNA': pl.List(pl.String()),
    'RefSeq_ncRNA_predicted': pl.List(pl.String()),
    'RefSeq_peptide': pl.List(pl.String()),
    'RefSeq_peptide_predicted': pl.List(pl.String()),
    'SFLD': pl.List(pl.String()),
    'Seg': pl.List(pl.String()),
    'SignalP': pl.List(pl.String()),
    'Smart': pl.List(pl.String()),
    'SuperFamily': pl.List(pl.String()),
    'TIGRfam': pl.List(pl.String()),
    'TMHMM': pl.List(pl.String()),
    'UCSC': pl.List(pl.String()),
    'UniParc': pl.List(pl.String()),
    'Uniprot/SPTREMBL': pl.List(pl.String()),
    'Uniprot/SWISSPROT': pl.List(pl.String()),
    'Uniprot_gn': pl.List(pl.String()),
    'Uniprot_isoform': pl.List(pl.String()),
    'WikiGene': pl.List(pl.String()),
    'alphafold': pl.List(pl.String()),
    'biotype': pl.String(),
    'coord_system': pl.Struct(
        {
            'version': pl.String(),
            'seq_name': pl.String(),
            'name': pl.String(),
            'seq_length': pl.Int64(),
        },
    ),
    'description': pl.String(),
    'end': pl.String(),
    'genome': pl.String(),
    'genome_display': pl.String(),
    'homologues': pl.List(pl.Null()),
    'id': pl.String(),
    'lineage': pl.List(pl.Int64()),
    'miRBase': pl.List(pl.String()),
    'miRBase_trans_name': pl.List(pl.String()),
    'name': pl.String(),
    'ncoils': pl.List(pl.String()),
    'protein_id': pl.List(pl.String()),
    'seq_region_name': pl.String(),
    'sifts': pl.List(pl.String()),
    'start': pl.String(),
    'strand': pl.String(),
    'taxon_id': pl.Int64(),
    'transcripts': pl.List(
        pl.Struct(
            {
                'BioGRID': pl.List(pl.String()),
                'CCDS': pl.List(pl.String()),
                'CDD': pl.List(pl.String()),
                'ChEMBL': pl.List(pl.String()),
                'EMBL': pl.List(pl.String()),
                'ENS_LRG_transcript': pl.List(pl.String()),
                'Ens_Hs_transcript': pl.List(pl.String()),
                'Ens_Hs_translation': pl.List(pl.String()),
                'EntrezGene_trans_name': pl.List(pl.String()),
                'GO': pl.List(
                    pl.Struct(
                        {
                            'parents': pl.List(pl.String()),
                            'evidence': pl.List(pl.String()),
                            'term': pl.String(),
                        },
                    ),
                ),
                'Gene3D': pl.List(pl.String()),
                'HAMAP': pl.List(pl.String()),
                'HGNC_trans_name': pl.List(pl.String()),
                'HPA': pl.List(pl.String()),
                'Interpro': pl.List(pl.String()),
                'MEROPS': pl.List(pl.String()),
                'MobiDBLite': pl.List(pl.String()),
                'NCBIfam': pl.List(pl.String()),
                'PANTHER': pl.List(pl.String()),
                'PDB': pl.List(pl.String()),
                'PIRSF': pl.List(pl.String()),
                'PRINTS': pl.List(pl.String()),
                'Pfam': pl.List(pl.String()),
                'Prosite_patterns': pl.List(pl.String()),
                'Prosite_profiles': pl.List(pl.String()),
                'RFAM_trans_name': pl.List(pl.String()),
                'RNAcentral': pl.List(pl.String()),
                'Reactome': pl.List(pl.String()),
                'Reactome_transcript': pl.List(pl.String()),
                'RefSeq_mRNA': pl.List(pl.String()),
                'RefSeq_mRNA_predicted': pl.List(pl.String()),
                'RefSeq_ncRNA': pl.List(pl.String()),
                'RefSeq_ncRNA_predicted': pl.List(pl.String()),
                'RefSeq_peptide': pl.List(pl.String()),
                'RefSeq_peptide_predicted': pl.List(pl.String()),
                'SFLD': pl.List(pl.String()),
                'Seg': pl.List(pl.String()),
                'SignalP': pl.List(pl.String()),
                'Smart': pl.List(pl.String()),
                'SuperFamily': pl.List(pl.String()),
                'TIGRfam': pl.List(pl.String()),
                'TMHMM': pl.List(pl.String()),
                'UCSC': pl.List(pl.String()),
                'UniParc': pl.List(pl.String()),
                'Uniprot/SPTREMBL': pl.List(pl.String()),
                'Uniprot/SWISSPROT': pl.List(pl.String()),
                'Uniprot_isoform': pl.List(pl.String()),
                'alphafold': pl.List(pl.String()),
                'biotype': pl.String(),
                'end': pl.String(),
                'exons': pl.List(
                    pl.Struct(
                        {
                            'start': pl.String(),
                            'strand': pl.String(),
                            'id': pl.String(),
                            'end': pl.String(),
                            'seq_region_name': pl.String(),
                        },
                    ),
                ),
                'id': pl.String(),
                'miRBase_trans_name': pl.List(pl.String()),
                'name': pl.String(),
                'ncoils': pl.List(pl.String()),
                'protein_id': pl.List(pl.String()),
                'seq_region_name': pl.String(),
                'sifts': pl.List(pl.String()),
                'start': pl.String(),
                'strand': pl.String(),
                'translations': pl.List(
                    pl.Struct(
                        {
                            'BioGRID': pl.List(pl.String()),
                            'CDD': pl.List(pl.String()),
                            'ChEMBL': pl.List(pl.String()),
                            'EMBL': pl.List(pl.String()),
                            'Ens_Hs_translation': pl.List(pl.String()),
                            'Gene3D': pl.List(pl.String()),
                            'HAMAP': pl.List(pl.String()),
                            'HPA': pl.List(pl.String()),
                            'Interpro': pl.List(pl.String()),
                            'MEROPS': pl.List(pl.String()),
                            'MobiDBLite': pl.List(pl.String()),
                            'NCBIfam': pl.List(pl.String()),
                            'PANTHER': pl.List(pl.String()),
                            'PDB': pl.List(pl.String()),
                            'PIRSF': pl.List(pl.String()),
                            'PRINTS': pl.List(pl.String()),
                            'Pfam': pl.List(pl.String()),
                            'Prosite_patterns': pl.List(pl.String()),
                            'Prosite_profiles': pl.List(pl.String()),
                            'Reactome': pl.List(pl.String()),
                            'RefSeq_peptide': pl.List(pl.String()),
                            'RefSeq_peptide_predicted': pl.List(pl.String()),
                            'SFLD': pl.List(pl.String()),
                            'Seg': pl.List(pl.String()),
                            'SignalP': pl.List(pl.String()),
                            'Smart': pl.List(pl.String()),
                            'SuperFamily': pl.List(pl.String()),
                            'TIGRfam': pl.List(pl.String()),
                            'TMHMM': pl.List(pl.String()),
                            'UniParc': pl.List(pl.String()),
                            'Uniprot/SPTREMBL': pl.List(pl.String()),
                            'Uniprot/SWISSPROT': pl.List(pl.String()),
                            'Uniprot_isoform': pl.List(pl.String()),
                            'alphafold': pl.List(pl.String()),
                            'id': pl.String(),
                            'ncoils': pl.List(pl.String()),
                            'protein_features': pl.List(
                                pl.Struct(
                                    {
                                        'dbname': pl.String(),
                                        'description': pl.String(),
                                        'end': pl.String(),
                                        'ensembl_object_type': pl.String(),
                                        'interpro_ac': pl.String(),
                                        'interpro_description': pl.String(),
                                        'interpro_name': pl.String(),
                                        'name': pl.String(),
                                        'start': pl.String(),
                                        'translation_id': pl.String(),
                                    },
                                ),
                            ),
                            'protein_id': pl.List(pl.String()),
                            'sifts': pl.List(pl.String()),
                            'xrefs': pl.List(
                                pl.Struct(
                                    {
                                        'db_display': pl.String(),
                                        'dbname': pl.String(),
                                        'description': pl.String(),
                                        'display_id': pl.String(),
                                        'info_text': pl.String(),
                                        'info_type': pl.String(),
                                        'primary_id': pl.String(),
                                    },
                                ),
                            ),
                        },
                    ),
                ),
                'xrefs': pl.List(
                    pl.Struct(
                        {
                            'associated_xrefs': pl.List(pl.Null()),
                            'db_display': pl.String(),
                            'dbname': pl.String(),
                            'description': pl.String(),
                            'display_id': pl.String(),
                            'info_text': pl.String(),
                            'info_type': pl.String(),
                            'linkage_types': pl.List(
                                pl.Struct(
                                    {
                                        'source': pl.Struct(
                                            {
                                                'display_id': pl.String(),
                                                'db_display_name': pl.String(),
                                                'dbname': pl.String(),
                                                'primary_id': pl.String(),
                                                'description': pl.String(),
                                            },
                                        ),
                                        'evidence': pl.String(),
                                    },
                                ),
                            ),
                            'primary_id': pl.String(),
                        },
                    ),
                ),
            },
        ),
    ),
    'xrefs': pl.List(
        pl.Struct(
            {
                'db_display': pl.String(),
                'dbname': pl.String(),
                'description': pl.String(),
                'display_id': pl.String(),
                'info_text': pl.String(),
                'info_type': pl.String(),
                'primary_id': pl.String(),
                'synonyms': pl.List(pl.String()),
            },
        ),
    ),
})


schema_114 = pl.Schema({
    'ArrayExpress': pl.List(pl.String()),
    'BioGRID': pl.List(pl.String()),
    'CCDS': pl.List(pl.String()),
    'CDD': pl.List(pl.String()),
    'ChEMBL': pl.List(pl.String()),
    'DBASS3': pl.List(pl.String()),
    'DBASS5': pl.List(pl.String()),
    'EMBL': pl.List(pl.String()),
    'ENS_LRG_gene': pl.List(pl.String()),
    'ENS_LRG_transcript': pl.List(pl.String()),
    'Ens_Hs_gene': pl.List(pl.String()),
    'Ens_Hs_transcript': pl.List(pl.String()),
    'Ens_Hs_translation': pl.List(pl.String()),
    'EntrezGene': pl.List(pl.String()),
    'EntrezGene_trans_name': pl.List(pl.String()),
    'GO': pl.List(
        pl.Struct(
            {
                'evidence': pl.List(pl.String()),
                'parents': pl.List(pl.String()),
                'term': pl.String(),
            },
        ),
    ),
    'Gene3D': pl.List(pl.String()),
    'GeneCards': pl.List(pl.String()),
    'HAMAP': pl.List(pl.String()),
    'HGNC': pl.List(pl.String()),
    'HGNC_trans_name': pl.List(pl.String()),
    'HPA': pl.List(pl.String()),
    'Interpro': pl.List(pl.String()),
    'LRG': pl.List(pl.String()),
    'MEROPS': pl.List(pl.String()),
    'MIM_GENE': pl.List(pl.String()),
    'MIM_MORBID': pl.List(pl.String()),
    'MobiDBLite': pl.List(pl.String()),
    'NCBIfam': pl.List(pl.String()),
    'PANTHER': pl.List(pl.String()),
    'PDB': pl.List(pl.String()),
    'PIRSF': pl.List(pl.String()),
    'PRINTS': pl.List(pl.String()),
    'Pfam': pl.List(pl.String()),
    'Phobius': pl.List(pl.String()),
    'Prosite_patterns': pl.List(pl.String()),
    'Prosite_profiles': pl.List(pl.String()),
    'RFAM': pl.List(pl.String()),
    'RFAM_trans_name': pl.List(pl.String()),
    'RNAcentral': pl.List(pl.String()),
    'Reactome': pl.List(pl.String()),
    'Reactome_gene': pl.List(pl.String()),
    'Reactome_transcript': pl.List(pl.String()),
    'RefSeq_mRNA': pl.List(pl.String()),
    'RefSeq_mRNA_predicted': pl.List(pl.String()),
    'RefSeq_ncRNA': pl.List(pl.String()),
    'RefSeq_ncRNA_predicted': pl.List(pl.String()),
    'RefSeq_peptide': pl.List(pl.String()),
    'RefSeq_peptide_predicted': pl.List(pl.String()),
    'SFLD': pl.List(pl.String()),
    'Seg': pl.List(pl.String()),
    'SignalP': pl.List(pl.String()),
    'SignalP_GRAM_NEGATIVE': pl.List(pl.String()),
    'SignalP_GRAM_POSITIVE': pl.List(pl.String()),
    'Smart': pl.List(pl.String()),
    'SuperFamily': pl.List(pl.String()),
    'TIGRfam': pl.List(pl.String()),
    'TMHMM': pl.List(pl.String()),
    'UCSC': pl.List(pl.String()),
    'UniParc': pl.List(pl.String()),
    'Uniprot/SPTREMBL': pl.List(pl.String()),
    'Uniprot/SWISSPROT': pl.List(pl.String()),
    'Uniprot_gn': pl.List(pl.String()),
    'Uniprot_isoform': pl.List(pl.String()),
    'WikiGene': pl.List(pl.String()),
    'alphafold': pl.List(pl.String()),
    'biotype': pl.String(),
    'coord_system': pl.Struct(
        {
            'version': pl.List(pl.String()),
            'seq_name': pl.String(),
            'name': pl.String(),
            'seq_length': pl.Int64(),
        },
    ),
    'description': pl.String(),
    'end': pl.String(),
    'genome': pl.String(),
    'genome_display': pl.String(),
    'homologues': pl.List(
        pl.Struct({
            'gene_tree_id': pl.List(pl.String()),
            'genome': pl.String(),
            'genome_display': pl.String(),
            'orthology_type': pl.String(),
            'stable_id': pl.String(),
            'taxonomy_id': pl.Int64(),
        })
    ),
    'id': pl.String(),
    'lineage': pl.List(pl.Int64()),
    'miRBase': pl.List(pl.String()),
    'miRBase_trans_name': pl.List(pl.String()),
    'name': pl.String(),
    'ncoils': pl.List(pl.String()),
    'protein_id': pl.List(pl.String()),
    'seq_region_name': pl.String(),
    'sifts': pl.List(pl.String()),
    'start': pl.String(),
    'strand': pl.String(),
    'taxon_id': pl.Int64(),
    'transcripts': pl.List(
        pl.Struct(
            {
                'BioGRID': pl.List(pl.String()),
                'CCDS': pl.List(pl.String()),
                'CDD': pl.List(pl.String()),
                'ChEMBL': pl.List(pl.String()),
                'EMBL': pl.List(pl.String()),
                'ENS_LRG_transcript': pl.List(pl.String()),
                'Ens_Hs_transcript': pl.List(pl.String()),
                'Ens_Hs_translation': pl.List(pl.String()),
                'EntrezGene_trans_name': pl.List(pl.String()),
                'GO': pl.List(
                    pl.Struct(
                        {
                            'parents': pl.List(pl.String()),
                            'evidence': pl.List(pl.String()),
                            'term': pl.String(),
                        },
                    ),
                ),
                'Gene3D': pl.List(pl.String()),
                'HAMAP': pl.List(pl.String()),
                'HGNC_trans_name': pl.List(pl.String()),
                'HPA': pl.List(pl.String()),
                'Interpro': pl.List(pl.String()),
                'MEROPS': pl.List(pl.String()),
                'MobiDBLite': pl.List(pl.String()),
                'NCBIfam': pl.List(pl.String()),
                'PANTHER': pl.List(pl.String()),
                'PDB': pl.List(pl.String()),
                'PIRSF': pl.List(pl.String()),
                'PRINTS': pl.List(pl.String()),
                'Pfam': pl.List(pl.String()),
                'Phobius': pl.List(pl.String()),
                'Prosite_patterns': pl.List(pl.String()),
                'Prosite_profiles': pl.List(pl.String()),
                'RFAM_trans_name': pl.List(pl.String()),
                'RNAcentral': pl.List(pl.String()),
                'Reactome': pl.List(pl.String()),
                'Reactome_transcript': pl.List(pl.String()),
                'RefSeq_mRNA': pl.List(pl.String()),
                'RefSeq_mRNA_predicted': pl.List(pl.String()),
                'RefSeq_ncRNA': pl.List(pl.String()),
                'RefSeq_ncRNA_predicted': pl.List(pl.String()),
                'RefSeq_peptide': pl.List(pl.String()),
                'RefSeq_peptide_predicted': pl.List(pl.String()),
                'SFLD': pl.List(pl.String()),
                'Seg': pl.List(pl.String()),
                'SignalP': pl.List(pl.String()),
                'SignalP_GRAM_NEGATIVE': pl.List(pl.String()),
                'SignalP_GRAM_POSITIVE': pl.List(pl.String()),
                'Smart': pl.List(pl.String()),
                'SuperFamily': pl.List(pl.String()),
                'TIGRfam': pl.List(pl.String()),
                'TMHMM': pl.List(pl.String()),
                'UCSC': pl.List(pl.String()),
                'UniParc': pl.List(pl.String()),
                'Uniprot/SPTREMBL': pl.List(pl.String()),
                'Uniprot/SWISSPROT': pl.List(pl.String()),
                'Uniprot_isoform': pl.List(pl.String()),
                'alphafold': pl.List(pl.String()),
                'biotype': pl.String(),
                'end': pl.String(),
                'exons': pl.List(
                    pl.Struct(
                        {
                            'start': pl.String(),
                            'strand': pl.String(),
                            'id': pl.String(),
                            'end': pl.String(),
                            'seq_region_name': pl.String(),
                        },
                    ),
                ),
                'id': pl.String(),
                'miRBase_trans_name': pl.List(pl.String()),
                'name': pl.String(),
                'ncoils': pl.List(pl.String()),
                'protein_id': pl.List(pl.String()),
                'seq_region_name': pl.String(),
                'sifts': pl.List(pl.String()),
                'start': pl.String(),
                'strand': pl.String(),
                'translations': pl.List(
                    pl.Struct(
                        {
                            'BioGRID': pl.List(pl.String()),
                            'CDD': pl.List(pl.String()),
                            'ChEMBL': pl.List(pl.String()),
                            'EMBL': pl.List(pl.String()),
                            'Ens_Hs_translation': pl.List(pl.String()),
                            'Gene3D': pl.List(pl.String()),
                            'HAMAP': pl.List(pl.String()),
                            'HPA': pl.List(pl.String()),
                            'Interpro': pl.List(pl.String()),
                            'MEROPS': pl.List(pl.String()),
                            'MobiDBLite': pl.List(pl.String()),
                            'NCBIfam': pl.List(pl.String()),
                            'PANTHER': pl.List(pl.String()),
                            'PDB': pl.List(pl.String()),
                            'PIRSF': pl.List(pl.String()),
                            'PRINTS': pl.List(pl.String()),
                            'Pfam': pl.List(pl.String()),
                            'Phobius': pl.List(pl.String()),
                            'Prosite_patterns': pl.List(pl.String()),
                            'Prosite_profiles': pl.List(pl.String()),
                            'Reactome': pl.List(pl.String()),
                            'RefSeq_peptide': pl.List(pl.String()),
                            'RefSeq_peptide_predicted': pl.List(pl.String()),
                            'SFLD': pl.List(pl.String()),
                            'Seg': pl.List(pl.String()),
                            'SignalP': pl.List(pl.String()),
                            'SignalP_GRAM_NEGATIVE': pl.List(pl.String()),
                            'SignalP_GRAM_POSITIVE': pl.List(pl.String()),
                            'Smart': pl.List(pl.String()),
                            'SuperFamily': pl.List(pl.String()),
                            'TIGRfam': pl.List(pl.String()),
                            'TMHMM': pl.List(pl.String()),
                            'UniParc': pl.List(pl.String()),
                            'Uniprot/SPTREMBL': pl.List(pl.String()),
                            'Uniprot/SWISSPROT': pl.List(pl.String()),
                            'Uniprot_isoform': pl.List(pl.String()),
                            'alphafold': pl.List(pl.String()),
                            'id': pl.String(),
                            'ncoils': pl.List(pl.String()),
                            'protein_features': pl.List(
                                pl.Struct(
                                    {
                                        'dbname': pl.String(),
                                        'description': pl.String(),
                                        'end': pl.String(),
                                        'ensembl_object_type': pl.String(),
                                        'interpro_ac': pl.String(),
                                        'interpro_description': pl.String(),
                                        'interpro_name': pl.String(),
                                        'name': pl.String(),
                                        'start': pl.String(),
                                        'translation_id': pl.String(),
                                    },
                                ),
                            ),
                            'protein_id': pl.List(pl.String()),
                            'sifts': pl.List(pl.String()),
                            'xrefs': pl.List(
                                pl.Struct(
                                    {
                                        'db_display': pl.String(),
                                        'dbname': pl.String(),
                                        'description': pl.String(),
                                        'display_id': pl.String(),
                                        'info_text': pl.String(),
                                        'info_type': pl.String(),
                                        'primary_id': pl.String(),
                                    },
                                ),
                            ),
                        },
                    ),
                ),
                'xrefs': pl.List(
                    pl.Struct(
                        {
                            'associated_xrefs': pl.List(pl.Null()),
                            'db_display': pl.String(),
                            'dbname': pl.String(),
                            'description': pl.String(),
                            'display_id': pl.String(),
                            'info_text': pl.String(),
                            'info_type': pl.String(),
                            'linkage_types': pl.List(
                                pl.Struct(
                                    {
                                        'source': pl.Struct(
                                            {
                                                'display_id': pl.List(pl.String()),
                                                'db_display_name': pl.List(pl.String()),
                                                'dbname': pl.List(pl.String()),
                                                'primary_id': pl.String(),
                                                'description': pl.List(pl.String()),
                                            },
                                        ),
                                        'evidence': pl.List(pl.String()),
                                    },
                                ),
                            ),
                            'primary_id': pl.String(),
                        },
                    ),
                ),
            },
        ),
    ),
    'xrefs': pl.List(
        pl.Struct(
            {
                'db_display': pl.String(),
                'dbname': pl.String(),
                'description': pl.String(),
                'display_id': pl.String(),
                'info_text': pl.String(),
                'info_type': pl.String(),
                'primary_id': pl.String(),
                'synonyms': pl.List(pl.String()),
            },
        ),
    ),
})

schema_ndjson = pl.Schema({
    'id': pl.String(),
    'approvedSymbol': pl.String(),
    'biotype': pl.String(),
    'description': pl.String(),
    'chromosome': pl.String(),
    'strand': pl.String(),
    'start': pl.String(),
    'end': pl.String(),
    'SignalP': pl.List(pl.String()),
    'uniprot_trembl': pl.List(pl.String()),
    'uniprot_swissprot': pl.List(pl.String()),
    'uniprot_isoform': pl.List(pl.String()),
    'alphafold': pl.List(pl.String()),
    'transcripts': pl.List(
        pl.Struct({
            'id': pl.String(),
            'approvedSymbol': pl.String(),
            'biotype': pl.String(),
            'description': pl.String(),
            'chromosome': pl.String(),
            'strand': pl.String(),
            'start': pl.String(),
            'end': pl.String(),
            'SignalP': pl.List(pl.String()),
            'uniprot_trembl': pl.List(pl.String()),
            'uniprot_swissprot': pl.List(pl.String()),
            'uniprot_isoform': pl.List(pl.String()),
            'alphafold': pl.List(pl.String()),
            'exons': pl.List(
                pl.Struct({
                    'id': pl.String(),
                    'start': pl.String(),
                    'end': pl.String(),
                    'strand': pl.String(),
                    'chromosome': pl.String(),
                }),
            ),
            'translations': pl.List(
                pl.Struct({
                    'id': pl.String(),
                }),
            ),
        })
    ),
})
